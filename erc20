pragma solidity 0.8.20;
interface Ierc20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer (address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);
    event Transfer (address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    
}

    function pay () payable public{
        require(msg.value > 0);
        balanceOf[msg.sender] += msg.value;
    }
    fallback() external {
        pay();        
    }
    address ownner;
    constructor (address _owner)  {
        ownner = _owner;
    }
    modifier control (){
        require(
            msg.sender == ownner 
        );
        _;
    }


    
    uint256 public totalSupply = 10*10**18;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    string public  constant name = "hatzil";
    string public constant symbbol = "HTZ";
    uint8 public  constant decimals = 18;







    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool) {  
        balanceOf[msg.sender] -= amount; 
        balanceOf[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
    function approve (address spender, uint256 amount) external  returns (bool) {
        allowance [msg.sender] [spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    } 
    function transferFrom(address spender , address recipient, uint256 amount) external returns (bool) {
        require(amount <= allowance[spender][msg.sender], "not enogth allowance");
        require(balanceOf[spender] >= amount, "not enogth balance");
        allowance [spender][msg.sender] -= amount;
        balanceOf [spender]-= amount; 
        balanceOf[recipient]+= amount;
        emit Transfer(spender, recipient, amount);
        return true;
    }
    function mint (uint256 amount ) external control() {
        require(totalSupply + amount <= type(uint256)    .max, "total supplay over flow" );
        // require(balanceOf[msg.sender] >= amount, "not enogth balance for fees");
        balanceOf[msg.sender] += amount;
        totalSupply += amount;
        emit Transfer(address(0), msg.sender, amount);
     }
    function burn (uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "not enougth balance");
        balanceOf [msg.sender] -= amount;
        totalSupply-= amount;
        emit Transfer(msg.sender, address(0), amount);  
    }

}
